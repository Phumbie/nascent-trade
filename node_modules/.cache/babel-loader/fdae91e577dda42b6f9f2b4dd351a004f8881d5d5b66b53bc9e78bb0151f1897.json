{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback } from 'react';\nimport { sendTrade } from '../services';\nexport const useOrderEntry = () => {\n  _s();\n  const [submitting, setSubmitting] = useState(false);\n  const [error, setError] = useState(null);\n  const [success, setSuccess] = useState(null);\n  const submitOrder = useCallback(async orderData => {\n    setSubmitting(true);\n    setError(null);\n    setSuccess(null);\n    try {\n      const result = await sendTrade(orderData);\n      setSuccess(result);\n      return result;\n    } catch (err) {\n      const errorMessage = err.message || 'Failed to submit order';\n      setError(errorMessage);\n      throw new Error(errorMessage);\n    } finally {\n      setSubmitting(false);\n    }\n  }, []);\n  const clearMessages = useCallback(() => {\n    setError(null);\n    setSuccess(null);\n  }, []);\n  return {\n    submitOrder,\n    submitting,\n    error,\n    success,\n    clearMessages\n  };\n};\n_s(useOrderEntry, \"97jhSB45PtDCYqqzyu7SD+q2Jos=\");","map":{"version":3,"names":["useState","useCallback","sendTrade","useOrderEntry","_s","submitting","setSubmitting","error","setError","success","setSuccess","submitOrder","orderData","result","err","errorMessage","message","Error","clearMessages"],"sources":["/Users/phumbie/Downloads/nascent-frontend-test/src/hooks/useOrderEntry.ts"],"sourcesContent":["import { useState, useCallback } from 'react';\nimport { sendTrade } from '../services';\nimport { OrderFormData, SubmittedOrder } from '../types';\n\nexport const useOrderEntry = () => {\n  const [submitting, setSubmitting] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [success, setSuccess] = useState<SubmittedOrder | null>(null);\n\n  const submitOrder = useCallback(async (orderData: OrderFormData): Promise<SubmittedOrder> => {\n    setSubmitting(true);\n    setError(null);\n    setSuccess(null);\n    \n    try {\n      const result = await sendTrade(orderData);\n      setSuccess(result);\n      return result;\n    } catch (err: any) {\n      const errorMessage = err.message || 'Failed to submit order';\n      setError(errorMessage);\n      throw new Error(errorMessage);\n    } finally {\n      setSubmitting(false);\n    }\n  }, []);\n\n  const clearMessages = useCallback(() => {\n    setError(null);\n    setSuccess(null);\n  }, []);\n\n  return { submitOrder, submitting, error, success, clearMessages };\n};\n\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AAC7C,SAASC,SAAS,QAAQ,aAAa;AAGvC,OAAO,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGN,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACO,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAgB,IAAI,CAAC;EACvD,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAwB,IAAI,CAAC;EAEnE,MAAMW,WAAW,GAAGV,WAAW,CAAC,MAAOW,SAAwB,IAA8B;IAC3FN,aAAa,CAAC,IAAI,CAAC;IACnBE,QAAQ,CAAC,IAAI,CAAC;IACdE,UAAU,CAAC,IAAI,CAAC;IAEhB,IAAI;MACF,MAAMG,MAAM,GAAG,MAAMX,SAAS,CAACU,SAAS,CAAC;MACzCF,UAAU,CAACG,MAAM,CAAC;MAClB,OAAOA,MAAM;IACf,CAAC,CAAC,OAAOC,GAAQ,EAAE;MACjB,MAAMC,YAAY,GAAGD,GAAG,CAACE,OAAO,IAAI,wBAAwB;MAC5DR,QAAQ,CAACO,YAAY,CAAC;MACtB,MAAM,IAAIE,KAAK,CAACF,YAAY,CAAC;IAC/B,CAAC,SAAS;MACRT,aAAa,CAAC,KAAK,CAAC;IACtB;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMY,aAAa,GAAGjB,WAAW,CAAC,MAAM;IACtCO,QAAQ,CAAC,IAAI,CAAC;IACdE,UAAU,CAAC,IAAI,CAAC;EAClB,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IAAEC,WAAW;IAAEN,UAAU;IAAEE,KAAK;IAAEE,OAAO;IAAES;EAAc,CAAC;AACnE,CAAC;AAACd,EAAA,CA7BWD,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}