{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nimport { getOrderbook } from '../services';\nexport const useOrderBook = asset => {\n  _s();\n  const [orderBook, setOrderBook] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const fetchOrderBook = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const data = await getOrderbook(asset);\n      const processed = processOrderBook(data);\n      setOrderBook(processed);\n    } catch (err) {\n      setError('Failed to fetch order book');\n      console.error(err);\n    } finally {\n      setLoading(false);\n    }\n  }, [asset]);\n  useEffect(() => {\n    fetchOrderBook();\n    // Poll every 5 seconds\n    const interval = setInterval(fetchOrderBook, 5000);\n    return () => clearInterval(interval);\n  }, [fetchOrderBook]);\n  return {\n    orderBook,\n    loading,\n    error,\n    refresh: fetchOrderBook\n  };\n};\n\n// Process raw API data into display format\n_s(useOrderBook, \"1Jcp+voJ2+XqAX1JjU4JqBJO3nc=\");\nconst processOrderBook = data => {\n  var _asks$, _bids$, _bids$2;\n  const bids = data.bids.map(([price, qty]) => ({\n    price: parseFloat(price),\n    quantity: parseFloat(qty)\n  }));\n  const asks = data.asks.map(([price, qty]) => ({\n    price: parseFloat(price),\n    quantity: parseFloat(qty)\n  }));\n  const spread = ((_asks$ = asks[0]) === null || _asks$ === void 0 ? void 0 : _asks$.price) - ((_bids$ = bids[0]) === null || _bids$ === void 0 ? void 0 : _bids$.price);\n  const spreadPercent = spread / ((_bids$2 = bids[0]) === null || _bids$2 === void 0 ? void 0 : _bids$2.price) * 100;\n  return {\n    bids,\n    asks,\n    spread,\n    spreadPercent\n  };\n};","map":{"version":3,"names":["useState","useEffect","useCallback","getOrderbook","useOrderBook","asset","_s","orderBook","setOrderBook","loading","setLoading","error","setError","fetchOrderBook","data","processed","processOrderBook","err","console","interval","setInterval","clearInterval","refresh","_asks$","_bids$","_bids$2","bids","map","price","qty","parseFloat","quantity","asks","spread","spreadPercent"],"sources":["/Users/phumbie/Downloads/nascent-frontend-test/src/hooks/useOrderBook.ts"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport { getOrderbook } from '../services';\nimport { Asset, OrderBookData, ProcessedOrderBook, OrderBookLevel } from '../types';\n\nexport const useOrderBook = (asset: Asset) => {\n  const [orderBook, setOrderBook] = useState<ProcessedOrderBook | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchOrderBook = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const data = await getOrderbook(asset);\n      const processed = processOrderBook(data);\n      setOrderBook(processed);\n    } catch (err) {\n      setError('Failed to fetch order book');\n      console.error(err);\n    } finally {\n      setLoading(false);\n    }\n  }, [asset]);\n\n  useEffect(() => {\n    fetchOrderBook();\n    // Poll every 5 seconds\n    const interval = setInterval(fetchOrderBook, 5000);\n    return () => clearInterval(interval);\n  }, [fetchOrderBook]);\n\n  return { orderBook, loading, error, refresh: fetchOrderBook };\n};\n\n// Process raw API data into display format\nconst processOrderBook = (data: OrderBookData): ProcessedOrderBook => {\n  const bids: OrderBookLevel[] = data.bids.map(([price, qty]) => ({\n    price: parseFloat(price),\n    quantity: parseFloat(qty),\n  }));\n\n  const asks: OrderBookLevel[] = data.asks.map(([price, qty]) => ({\n    price: parseFloat(price),\n    quantity: parseFloat(qty),\n  }));\n\n  const spread = asks[0]?.price - bids[0]?.price;\n  const spreadPercent = (spread / bids[0]?.price) * 100;\n\n  return { bids, asks, spread, spreadPercent };\n};\n\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AACxD,SAASC,YAAY,QAAQ,aAAa;AAG1C,OAAO,MAAMC,YAAY,GAAIC,KAAY,IAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAA4B,IAAI,CAAC;EAC3E,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAgB,IAAI,CAAC;EAEvD,MAAMa,cAAc,GAAGX,WAAW,CAAC,YAAY;IAC7CQ,UAAU,CAAC,IAAI,CAAC;IAChBE,QAAQ,CAAC,IAAI,CAAC;IACd,IAAI;MACF,MAAME,IAAI,GAAG,MAAMX,YAAY,CAACE,KAAK,CAAC;MACtC,MAAMU,SAAS,GAAGC,gBAAgB,CAACF,IAAI,CAAC;MACxCN,YAAY,CAACO,SAAS,CAAC;IACzB,CAAC,CAAC,OAAOE,GAAG,EAAE;MACZL,QAAQ,CAAC,4BAA4B,CAAC;MACtCM,OAAO,CAACP,KAAK,CAACM,GAAG,CAAC;IACpB,CAAC,SAAS;MACRP,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC,EAAE,CAACL,KAAK,CAAC,CAAC;EAEXJ,SAAS,CAAC,MAAM;IACdY,cAAc,CAAC,CAAC;IAChB;IACA,MAAMM,QAAQ,GAAGC,WAAW,CAACP,cAAc,EAAE,IAAI,CAAC;IAClD,OAAO,MAAMQ,aAAa,CAACF,QAAQ,CAAC;EACtC,CAAC,EAAE,CAACN,cAAc,CAAC,CAAC;EAEpB,OAAO;IAAEN,SAAS;IAAEE,OAAO;IAAEE,KAAK;IAAEW,OAAO,EAAET;EAAe,CAAC;AAC/D,CAAC;;AAED;AAAAP,EAAA,CA9BaF,YAAY;AA+BzB,MAAMY,gBAAgB,GAAIF,IAAmB,IAAyB;EAAA,IAAAS,MAAA,EAAAC,MAAA,EAAAC,OAAA;EACpE,MAAMC,IAAsB,GAAGZ,IAAI,CAACY,IAAI,CAACC,GAAG,CAAC,CAAC,CAACC,KAAK,EAAEC,GAAG,CAAC,MAAM;IAC9DD,KAAK,EAAEE,UAAU,CAACF,KAAK,CAAC;IACxBG,QAAQ,EAAED,UAAU,CAACD,GAAG;EAC1B,CAAC,CAAC,CAAC;EAEH,MAAMG,IAAsB,GAAGlB,IAAI,CAACkB,IAAI,CAACL,GAAG,CAAC,CAAC,CAACC,KAAK,EAAEC,GAAG,CAAC,MAAM;IAC9DD,KAAK,EAAEE,UAAU,CAACF,KAAK,CAAC;IACxBG,QAAQ,EAAED,UAAU,CAACD,GAAG;EAC1B,CAAC,CAAC,CAAC;EAEH,MAAMI,MAAM,GAAG,EAAAV,MAAA,GAAAS,IAAI,CAAC,CAAC,CAAC,cAAAT,MAAA,uBAAPA,MAAA,CAASK,KAAK,MAAAJ,MAAA,GAAGE,IAAI,CAAC,CAAC,CAAC,cAAAF,MAAA,uBAAPA,MAAA,CAASI,KAAK;EAC9C,MAAMM,aAAa,GAAID,MAAM,KAAAR,OAAA,GAAGC,IAAI,CAAC,CAAC,CAAC,cAAAD,OAAA,uBAAPA,OAAA,CAASG,KAAK,IAAI,GAAG;EAErD,OAAO;IAAEF,IAAI;IAAEM,IAAI;IAAEC,MAAM;IAAEC;EAAc,CAAC;AAC9C,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}